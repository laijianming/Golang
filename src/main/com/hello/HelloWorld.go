package main

import "fmt"

/**
	静态编译语言的安全和性能（c）+动态语言开发维护的高效率（Python）
1、继承C中的表达式语法、控制结构、基础数据类型、调用参数传值、指针等；
2、一个文件属于一个包
3、垃圾回收机制
4、天然并发：语言层面支持并发，实现简单；goroutine，轻量级线程，可实现大并发处理，高效利用多核；基于CPS并发模型实现；
5、管道通信机制：形成go语言特有的管道Channel，通过管道Channel，可以实现不同goroute之间的相互通信；
6、函数返回多个值
7、新的创新：比如切片、延时执行defer等

	golang 执行流程分析
.go文件 -> go build -> 可执行文件 -> 运行 -> 结果
.go文件 -> go run -> 运行 -> 结果
// 编译为可执行文件后可在无go环境下的机器下运行，并且会将运行依赖的库文件包含在可执行文件中，使可执行文件变大了很多

	go build
指定可执行文件名字： go build -o xxx.exe yyy.go
不指定则用.go文件的名字

	Go 程序的开发事项
1、Go源文件以"go"为扩展名
2、Go应用程序的执行入口是main()函数
3、Go语言严格区分大小写
4、Go方法由一条条语句构成，每个语句后不需要分号（自动加）
5、Go编译器是一行行进行编译的，因此我们一行就写一条语句，不能把多条语句写在同一行
6、定义一个变量必须要使用到

	Go语言转义字符
1、 \t  一个制位表
2、 \n  换行
3、 \r  一个回车：从当前行的最前面开始输出，覆盖掉以前的内容
*/
func main() {
	fmt.Println("fmt hello world !!!")
	fmt.Println(def1(5, 1))
}

func test() {

}

// 返回多个值
func def1(n1 int, n2 int) (int, int) {
	sum := n1 + n2
	sub := n1 - n2
	return sum, sub
}
